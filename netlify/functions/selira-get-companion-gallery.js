// Get all generated images for a specific companion
// Returns images generated by the current user for this companion

const fetch = require('node-fetch');

exports.handler = async (event, context) => {
  // CORS headers
  const headers = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Headers': 'Content-Type',
    'Access-Control-Allow-Methods': 'GET, POST, OPTIONS'
  };

  // Handle preflight
  if (event.httpMethod === 'OPTIONS') {
    return { statusCode: 200, headers, body: '' };
  }

  if (event.httpMethod !== 'GET' && event.httpMethod !== 'POST') {
    return {
      statusCode: 405,
      headers,
      body: JSON.stringify({ error: 'Method not allowed' })
    };
  }

  try {
    const AIRTABLE_BASE_ID = process.env.AIRTABLE_BASE_ID_SELIRA;
    const AIRTABLE_TOKEN = process.env.AIRTABLE_TOKEN_SELIRA;

    if (!AIRTABLE_BASE_ID || !AIRTABLE_TOKEN) {
      console.error('‚ùå Airtable credentials not configured');
      return {
        statusCode: 500,
        headers,
        body: JSON.stringify({ error: 'Database not configured' })
      };
    }

    // Parse parameters
    const params = event.queryStringParameters || {};
    const companionSlug = params.slug;
    const userEmail = params.user_email;

    if (!companionSlug) {
      return {
        statusCode: 400,
        headers,
        body: JSON.stringify({ error: 'Missing companion slug' })
      };
    }

    console.log('üì∏ Fetching gallery for:', { companionSlug, userEmail });

    // Log all available environment variables (without exposing sensitive tokens)
    console.log('üîß Environment check:', {
      hasBaseId: !!AIRTABLE_BASE_ID,
      hasToken: !!AIRTABLE_TOKEN,
      baseIdPrefix: AIRTABLE_BASE_ID ? AIRTABLE_BASE_ID.substring(0, 8) + '...' : 'missing'
    });

    // First, get character ID from slug
    const characterSearchUrl = `https://api.airtable.com/v0/${AIRTABLE_BASE_ID}/Characters?` +
      `filterByFormula={Slug}='${companionSlug}'&maxRecords=1`;

    const charResponse = await fetch(characterSearchUrl, {
      headers: {
        'Authorization': `Bearer ${AIRTABLE_TOKEN}`,
        'Content-Type': 'application/json'
      }
    });

    if (!charResponse.ok) {
      const errorText = await charResponse.text();
      console.error('‚ùå Error fetching character:', errorText);
      return {
        statusCode: 500,
        headers,
        body: JSON.stringify({ error: 'Failed to fetch character' })
      };
    }

    const charData = await charResponse.json();
    if (!charData.records || charData.records.length === 0) {
      return {
        statusCode: 404,
        headers,
        body: JSON.stringify({ error: 'Character not found' })
      };
    }

    const characterId = charData.records[0].id;
    console.log('‚úÖ Found character:', characterId);

    // Get user record ID if email provided (for filtering)
    let userRecordId = null;
    if (userEmail) {
      const userSearchUrl = `https://api.airtable.com/v0/${AIRTABLE_BASE_ID}/Users?` +
        `filterByFormula={Email}='${userEmail.replace(/'/g, "\\'")}'&maxRecords=1`;

      const userResponse = await fetch(userSearchUrl, {
        headers: {
          'Authorization': `Bearer ${AIRTABLE_TOKEN}`,
          'Content-Type': 'application/json'
        }
      });

      if (userResponse.ok) {
        const userData = await userResponse.json();
        if (userData.records && userData.records.length > 0) {
          userRecordId = userData.records[0].id;
          console.log('‚úÖ Found user:', userRecordId);
        }
      }
    }

    // Fetch ALL generated images (no filter - we'll filter in code like the feed does)
    // This is more reliable than Airtable's FIND() formulas with linked records
    const imagesUrl = `https://api.airtable.com/v0/${AIRTABLE_BASE_ID}/Generated_Images?` +
      `sort[0][field]=generation_date&` +
      `sort[0][direction]=desc&` +
      `pageSize=100`; // Max 100 images

    console.log('üîç Fetching images:', imagesUrl);

    const imagesResponse = await fetch(imagesUrl, {
      headers: {
        'Authorization': `Bearer ${AIRTABLE_TOKEN}`,
        'Content-Type': 'application/json'
      }
    });

    if (!imagesResponse.ok) {
      const errorText = await imagesResponse.text();
      console.error('‚ùå Error fetching images:', errorText);
      return {
        statusCode: 500,
        headers,
        body: JSON.stringify({ error: 'Failed to fetch images' })
      };
    }

    const imagesData = await imagesResponse.json();

    console.log(`üìä Raw Airtable response:`, {
      recordCount: imagesData.records?.length || 0,
      hasOffset: !!imagesData.offset
    });

    // Filter images in code (like the feed function does)
    // This is more reliable than Airtable FIND() formulas
    const images = [];

    for (const record of imagesData.records || []) {
      const fields = record.fields;

      // Check if this image belongs to our companion
      const companionIdArray = fields.companion_id || [];
      const matchesCompanion = companionIdArray.includes(characterId);

      if (!matchesCompanion) {
        continue; // Skip if not for this companion
      }

      // If user filter is specified, check if image belongs to that user
      if (userRecordId) {
        const userIdArray = fields.user_id || [];
        const matchesUser = userIdArray.includes(userRecordId);

        if (!matchesUser) {
          continue; // Skip if not for this user
        }
      }

      // Only include if has image_url
      if (!fields.image_url) {
        continue;
      }

      // Add to results
      images.push({
        id: record.id,
        image_url: fields.image_url,
        generation_date: fields.generation_date,
        prompt: fields.prompt
      });
    }

    console.log(`‚úÖ Found ${images.length} images for character ${characterId}` +
                (userRecordId ? ` and user ${userRecordId}` : ''));

    return {
      statusCode: 200,
      headers,
      body: JSON.stringify({
        success: true,
        companion_slug: companionSlug,
        character_id: characterId,
        images: images,
        count: images.length
      })
    };

  } catch (error) {
    console.error('‚ùå Get companion gallery error:', error);
    return {
      statusCode: 500,
      headers,
      body: JSON.stringify({
        error: 'Failed to fetch gallery',
        details: error.message
      })
    };
  }
};
